@using BlazingTheWeb.Core
@using System.Numerics

@page "/sequence"

@inject IJSRuntime JSRuntime

<h1>Sequence</h1>

<p>Calculations are being made at:</p>
<ul>
    <li>Latitude: @latitude</li>
    <li>Longitude: @longitude</li>
    <li>Accuracy: @accuracy (in meters)</li>
</ul>
<!--From https://www.bing.com/maps/embed-a-map-->
<div>
    <iframe width="500" height="400" frameborder="0" src="@bingMainUrl" scrolling="no"></iframe>
    <div style="white-space: nowrap; text-align: center; width: 500px; padding: 6px 0;">
        <a id="largeMapLink" href="@bingLargeMapUrl" target="_blank">View Larger Map</a> &nbsp; | &nbsp;
        <a id="dirMapLink" href="@bingDirectionsUrl" target="_blank">Get Directions</a>
    </div>
</div>

<p>Current sequence: @currentSequence</p>
<input type="text" bind="@value" />
<button class="btn btn-primary" onclick="@CreateSequence">Create Sequence</button>

@functions {
   string value = string.Empty;
   string currentSequence = string.Empty;
   string bingMainUrl = default;
   string bingLargeMapUrl = default;
   string bingDirectionsUrl = default;
   double latitude = default;
   double longitude = default;
   double accuracy = default;

   [JSInvokable]
   public void Change(double latitude, double longitude, double accuracy)
   {
       (this.latitude, this.longitude, this.accuracy) = (latitude, longitude, accuracy);
       bingMainUrl = $"https://www.bing.com/maps/embed?h=400&w=500&cp={latitude}~{longitude}&lvl=11&typ=d&sty=r&src=SHELL&FORM=MBEDV8";
       bingLargeMapUrl = $"https://www.bing.com/maps?cp={latitude}~{longitude}&amp;sty=r&amp;lvl=11&amp;FORM=MBEDLD";
       bingDirectionsUrl = $"https://www.bing.com/maps/directions?cp={latitude}~-{longitude}&amp;sty=r&amp;lvl=11&amp;rtp=~pos.{latitude}_{longitude}____&amp;FORM=MBEDLD";
       Console.WriteLine($"in {bingMainUrl}");
       this.StateHasChanged();
   }

   protected override async Task OnInitAsync()
   {
       await JSRuntime.InvokeAsync<object>("getGeolocation", new DotNetObjectRef(this));
   }

   void CreateSequence()
   {
       if (BigInteger.TryParse(this.value, out var value))
       {
           try
           {
               var sequence = new CollatzSequence(value);
               this.currentSequence = string.Join(", ", sequence.Sequence);
               this.StateHasChanged();
           }
           catch (ArgumentException)
           {
               this.currentSequence = $"The value, {value}, is incorrect.";
               this.StateHasChanged();
           }
       }
       else
       {
           this.currentSequence = $"{this.value} is not a valid integer.";
           this.StateHasChanged();
       }
   }
}
