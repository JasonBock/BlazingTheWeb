@using BlazingTheWeb.Core
@using System.Numerics

@page "/sequence"

@inject IJSRuntime JSRuntime

<Geolocation />

<input type="text" @bind="this.start" />
<button class="btn btn-primary" @onclick="this.CreateSequence">Create Sequence</button>
<p>Current sequence: @this.currentSequence</p>

<canvas id=@CollatzChartId width="400" height="400"></canvas>

@code {
    const string CollatzChartId = "collatzChart";
    string start = string.Empty;
    string currentSequence = string.Empty;
    List<object> sequence = default;
    string[] labels = default;

    public async void CreateSequence()
    {
        if (BigInteger.TryParse(this.start, out var value))
        {
            try
            {
                var sequence = new CollatzSequence(value);
                this.currentSequence = string.Join(", ", sequence.Sequence);
                this.sequence = sequence.Sequence.Select(_ => (object)(int)_).ToList();
                this.labels = Enumerable.Range(1, sequence.Sequence.Length).Select(_ => _.ToString()).ToArray();
                this.StateHasChanged();
                await this.JSRuntime.InvokeAsync<object>("updateChart", CollatzChartId,
                   sequence.Sequence.Select(_ => (int)_).ToArray(), this.labels);
            }
            catch (ArgumentException)
            {
                this.currentSequence = $"The value, {value}, is incorrect.";
                this.sequence = default;
                this.labels = Array.Empty<string>();
                this.StateHasChanged();
                await this.JSRuntime.InvokeAsync<object>("updateChart", CollatzChartId, 
                    Array.Empty<int>(), Array.Empty<string>());
            }
        }
        else
        {
            this.currentSequence = $"{this.start} is not a valid integer.";
            this.StateHasChanged();
            this.StateHasChanged();
            await this.JSRuntime.InvokeAsync<object>("updateChart", CollatzChartId, 
                Array.Empty<int>(), Array.Empty<string>());
        }
    }
}